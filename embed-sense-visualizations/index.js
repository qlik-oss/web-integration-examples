require('babel-polyfill');
import { downloadVisualization } from './reporting-utils';

const config = require('./config');
const { getUser, getTenant, getAppList, baseUrl } = require('./comm');

const link = document.createElement('link');
link.rel = 'stylesheet';
link.href = `${baseUrl}/resources/autogenerated/qlik-styles.css`;
document.head.appendChild(link);

const script = document.createElement('script');
script.src = `${baseUrl}/resources/assets/external/requirejs/require.js`;
script.onload = async () => {
  requirejs.config({
    baseUrl: baseUrl + '/resources',
    webIntegrationId: config.webIntegrationId,
  });

  // build a single-sign on URL and return back here once completed:
  const loginUrl = new URL(`${baseUrl}/login`);
  loginUrl.searchParams.append('returnto', location.href);
  loginUrl.searchParams.append('qlik-web-integration-id', config.webIntegrationId);

  const loginBtn = document.querySelector('#login');
  loginBtn.addEventListener('click', () => {
    location.href = loginUrl;
  });

  const logoutBtn = document.querySelector('#logout');
  logoutBtn.addEventListener('click', () => {
    location.href = new URL(`${baseUrl}/logout`);
  });

  const [user, tenant] = await Promise.all([getUser(), getTenant()]);
  if (user || tenant) {
    loginBtn.disabled = true;
    logoutBtn.disabled = false;
    document.querySelector('.logged_in').style.opacity = 0;
    document.querySelector('.logged_out').style.opacity = 1;
    document.querySelector('#user').innerHTML = user.name;
    document.querySelector('#tenant').innerHTML = tenant.name;
    initMashup();
  } else {
    loginBtn.disabled = false;
    logoutBtn.disabled = true;
    document.querySelector('.logged_in').style.opacity = 1;
    document.querySelector('.logged_out').style.opacity = 0;
  }
};

document.body.appendChild(script);

function renderError(error) {
  document.querySelector('#QV01').innerHTML = `Failed to render charts: <pre><code>${error.error || error.stack || error.message || error
    }</code></pre>`;
}

/**
 * enable the download button on the linechart visualization. Setup the proper event listeners to run the download
 *  and show the spinner when the download button is clicked. When the download content is ready, display the download
 *  content URL in the link next to the download button.
 * @param visualization
 * @returns {Promise<void>}
 */
async function enableLinechartDownload(visualization) {
  const linechartDownloadBtn = document.querySelector('#linechart-download-btn');
  const linechartDownloadSelect = document.querySelector('#linechart-select');
  const linechartDownloadSpinner = document.querySelector('#linechart-download-spinner');
  linechartDownloadSelect.disabled = false;
  linechartDownloadSelect.addEventListener('change', async () => {
    linechartDownloadSpinner.classList.add('not-visible');
    linechartDownloadBtn.disabled = false;
  });
  linechartDownloadBtn.addEventListener('click', async () => {
    linechartDownloadSpinner.classList.remove('not-visible');
    linechartDownloadBtn.disabled = true;
    linechartDownloadSelect.disabled = true;
    const linechartBoundingClientRect = document.querySelector('#QV01').getBoundingClientRect();
    await downloadVisualization(
      visualization,
      linechartDownloadSelect.value,
      linechartBoundingClientRect.width,
      linechartBoundingClientRect.height
    );
    linechartDownloadSpinner.classList.add('not-visible');
    linechartDownloadBtn.disabled = false;
    linechartDownloadSelect.disabled = false;
  });
}

async function initMashup() {
  const list = await getAppList('drugcases');
  const ulElement = document.createElement('ul');

  list.data.forEach((appItem) => {
    const liElement = document.createElement('li');
    liElement.innerHTML = `<b>${appItem.name}</b> - ${appItem.resourceId}`;
    ulElement.appendChild(liElement);
  });
  document.querySelector('#app_list').appendChild(ulElement);

  const appIds = list.data
    .filter((appItem) => appItem.name.indexOf('drug') !== -1)
    .map((appItem) => appItem.resourceId);

  document.querySelector('#QV01').innerHTML = 'Generating visualization...';
  document.querySelector('#QV02').innerHTML = 'Generating visualization...';

  requirejs(['js/qlik'], (qlik) => {
    const app = qlik.openApp(appIds.length ? appIds[0] : config.appId, config);
    app.on('error', renderError);
    app.getObject('CurrentSelections', 'CurrentSelections');

    try {
      //Create visualizations
      app.visualization.create(
        'piechart',
        [
          {
            qLibraryId: '4b9e766f-5842-46b5-ab3d-15c6b3020071',
            qDef: {
              qGrouping: 'N',
              qFieldDefs: [],
              qFieldLabels: [],
            },
          },
          {
            qDef: {
              qLabel: '',
              qDescription: '',
              qTags: [],
              qGrouping: 'N',
              qDef: 'count(Drug_caseID)',
            },
          },
        ],
        {
          title: 'Total drug cases per continent',
        }
      ).then(vis => {
        vis.show('QV01').then(() => {
          // enable the download button when the chart is ready
          enableLinechartDownload(vis);
        });
      });


      app.visualization.get('ced9d474-cad3-4df5-bc09-06d27dcf634a').then(vis => {
        vis.show('QV02');
      });

    } catch (error) {
      renderError(error);
    }
  });
}
